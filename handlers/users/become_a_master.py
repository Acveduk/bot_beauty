from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton

from data.profile import profile_user, services_master
from filters import CheckClient
from loader import dp, bot
from states.state_users import Become_master, Reject
from utils.db_api import postgres


@dp.message_handler(CheckClient(), text='üíÖ –°—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º')
async def become_a_master(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row('üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É')
    keyboard.row('‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')

    await bot.send_message(chat_id=message.from_user.id,
                           text='–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n'
                                '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:\n'
                                '‚ùóÔ∏è  üöá –ú–µ—Ç—Ä–æ(–ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –¥–æ –º–µ—Å—Ç–∞ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã)\n'
                                '‚ùóÔ∏è  üè° –ê–¥—Ä–µ—Å(–ê–¥—Ä–µ—Å –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã)\n'
                                '‚ùóÔ∏è  üë§ –§–ò–û\n'
                                '‚ùóÔ∏è  üñº –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è(–ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã)\n'
                                '‚ùóÔ∏è  üíª –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏(–ö–∞–∫—É—é-–ª–∏–±–æ –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π)\n'
                                '\n'
                                '–ë–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                           reply_markup=keyboard)
    await Become_master.profile.set()


@dp.message_handler(CheckClient(), text='‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å', state=Become_master.profile)
async def my_profile(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row('üíª –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', 'üíÖ –°—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º')
    keyboard.row('üôã‚Äç‚ôÄÔ∏è–û —Å–µ–±–µ', 'üñº –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è')
    keyboard.row('üìÇ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')

    await bot.send_message(chat_id=message.from_user.id,
                           text='–ß—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —à–∞–Ω—Å –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω–Ω–æ –≤–∞—Å, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
                           reply_markup=keyboard)
    await state.finish()


@dp.message_handler(CheckClient(), text='üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', state=Become_master.profile)
async def check_master(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await postgres.get_user(user_id=message.from_user.id)
    services = await services_master(user_id=message.from_user.id)
    if await postgres.check_rating_client(user_id=message.from_user.id):
        rating = await postgres.select_rating_client(user_id=message.from_user.id)
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data=f"accept:{user_id}"),
                    InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f"reject:{user_id}")
                ]
            ]
        )
        await bot.send_photo(chat_id=1073644727,
                             photo=f"{user[0]['photo']}",
                             caption=profile_user(user=user, services=services, rating=rating),
                             reply_markup=keyboard)
        await bot.send_message(chat_id=message.from_user.id, text='–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n'
                                                                  '–í–∞–º –ø—Ä–∏–¥–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏')
        await state.finish()

    else:
        rating = 0
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data=f"accept:{user_id}"),
                    InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f"reject:{user_id}")
                ]
            ]
        )
        await bot.send_photo(chat_id=-1001348703754,
                             photo=f"{user[0]['photo']}",
                             caption=profile_user(user=user, services=services, rating=rating),
                             reply_markup=keyboard)
        await bot.send_message(chat_id=message.from_user.id, text='–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n'
                                                                  '–í–∞–º –ø—Ä–∏–¥–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏')
        await state.finish()


@dp.callback_query_handler(text_contains='accept')
async def accept_master(call: types.CallbackQuery):
    user_id = call.data.split(":")[-1]
    user_id = int(user_id)
    await postgres.update_master(user_id=user_id, purse=0, manicure_pedicure='–ù–µ—Ç', visage='–ù–µ—Ç', hairdresser='–ù–µ—Ç',
                                 other_services='–ù–µ—Ç', favorites=0)
    await bot.send_message(chat_id=call.from_user.id, text='–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n')
    await bot.send_message(chat_id=user_id, text='–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n'
                                                 '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Ç–µ–ø–µ—Ä—å –≤—ã –º–∞—Å—Ç–µ—Ä')


@dp.callback_query_handler(text_contains='reject')
async def accept_master(call: types.CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[-1]
    user_id = int(user_id)
    await state.update_data(user_id=user_id)
    await bot.send_message(chat_id=call.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏.\n')
    await Reject.profile.set()


@dp.message_handler(state=Reject.profile)
async def check_master(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    text = message.text
    await bot.send_message(chat_id=user_id, text=f'–í–∞–º –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞\n'
                                                 f'–ü—Ä–∏—á–∏–Ω–∞: {text}')
    await bot.send_message(chat_id=message.from_user.id, text='–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.finish()
