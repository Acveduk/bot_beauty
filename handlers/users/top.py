from aiogram import types
from aiogram.types import InlineKeyboardButton

from loader import dp, bot
from utils.db_api import postgres


@dp.callback_query_handler(text='top')
async def top(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='üíÖ –ú–∞–Ω–∏–∫—é—Ä/–ü–µ–¥–∏–∫—é—Ä', callback_data='top_manicure')
            ],
            [
                InlineKeyboardButton(text='üíá‚Äç‚ôÄÔ∏è–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä', callback_data='top_hairdresser')
            ],
            [
                InlineKeyboardButton(text='üíã –í–∏–∑–∞–∂', callback_data='top_visage')
            ],
            [
                InlineKeyboardButton(text='üßñ‚Äç‚ôÄÔ∏è–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏', callback_data='top_other_services')
            ],
            [
                InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_find')
            ]

        ]
    )
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ç–æ–ø 25 –º–∞—Å—Ç–µ—Ä–æ–≤')
    await call.message.edit_reply_markup(reply_markup=keyboard)


@dp.callback_query_handler(text='top_manicure')
async def top(call: types.CallbackQuery):
    city = await postgres.select_city(user_id=call.from_user.id)
    master = await postgres.select_top_master_manicure(city=city[0]['city'])
    if master != []:
        c = 0
        top_text = ''
        for user in master:
            if user['best'] == True:
                text = ''
                if 1 <= user['avg'] < 2:
                    text += f"‚≠êÔ∏è({round(float(user['avg']), 1)})"

                elif 2 <= user['avg'] < 3:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"

                elif 3 <= user['avg'] < 4:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"

                elif 4 <= user['avg'] < 5:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"

                elif 5 <= user['avg']:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"
                c += 1
                top_text += f"{c}. {user['name_user']}(ID:{user['user_number']}): {text}\n\n"

        await bot.send_message(chat_id=call.from_user.id, text=f"–¢–æ–ø –ª—É—á—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ —É—Å–ª—É–≥–µ –º–∞–Ω–∏–∫—é—Ä/–ø–µ–¥–∏–∫—é—Ä:\n\n"
                                                               f"{top_text}")
    else:
        await bot.send_message(chat_id=call.from_user.id, text=f"–í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª—Å—è —Ç–æ–ø –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ —É—Å–ª—É–≥–µ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä")


@dp.callback_query_handler(text='top_hairdresser')
async def top(call: types.CallbackQuery):
    city = await postgres.select_city(user_id=call.from_user.id)
    master = await postgres.select_top_master_hairdresser(city=city[0]['city'])
    if master != []:
        c = 0
        top_text = ''
        for user in master:
            if user['best'] == True:
                text = ''
                if 1 <= user['avg'] < 2:
                    text += f"‚≠êÔ∏è({round(float(user['avg']), 1)})"

                elif 2 <= user['avg'] < 3:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"

                elif 3 <= user['avg'] < 4:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"

                elif 4 <= user['avg'] < 5:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"

                elif 5 <= user['avg']:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"
                c += 1
                top_text += f"{c}. {user['name_user']}(ID:{user['user_number']}): {text}\n\n"

        await bot.send_message(chat_id=call.from_user.id, text=f"–¢–æ–ø –ª—É—á—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ —É—Å–ª—É–≥–µ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä:\n\n"
                                                               f"{top_text}")
    else:
        await bot.send_message(chat_id=call.from_user.id, text=f"–í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª—Å—è —Ç–æ–ø –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ —É—Å–ª—É–≥–µ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä")


@dp.callback_query_handler(text='top_visage')
async def top(call: types.CallbackQuery):
    city = await postgres.select_city(user_id=call.from_user.id)
    master = await postgres.select_top_master_visage(city=city[0]['city'])
    if master != []:
        c = 0
        top_text = ''
        for user in master:
            if user['best'] == True:
                text = ''
                if 1 <= user['avg'] < 2:
                    text += f"‚≠êÔ∏è({round(float(user['avg']), 1)})"

                elif 2 <= user['avg'] < 3:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"

                elif 3 <= user['avg'] < 4:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"

                elif 4 <= user['avg'] < 5:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"

                elif 5 <= user['avg']:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"
                c += 1
                top_text += f"{c}. {user['name_user']}(ID:{user['user_number']}): {text}\n\n"

        await bot.send_message(chat_id=call.from_user.id, text=f"–¢–æ–ø –ª—É—á—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ —É—Å–ª—É–≥–µ –≤–∏–∑–∞–∂:\n\n"
                                                               f"{top_text}")
    else:
        await bot.send_message(chat_id=call.from_user.id, text=f"–í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª—Å—è —Ç–æ–ø –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ —É—Å–ª—É–≥–µ –≤–∏–∑–∞–∂")

@dp.callback_query_handler(text='top_other_services')
async def top(call: types.CallbackQuery):
    city = await postgres.select_city(user_id=call.from_user.id)
    master = await postgres.select_top_master_other_services(city=city[0]['city'])
    if master != []:
        c = 0
        top_text = ''
        for user in master:
            if user['best'] == True:
                text = ''
                if 1 <= user['avg'] < 2:
                    text += f"‚≠êÔ∏è({round(float(user['avg']), 1)})"

                elif 2 <= user['avg'] < 3:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"

                elif 3 <= user['avg'] < 4:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"

                elif 4 <= user['avg'] < 5:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"

                elif 5 <= user['avg']:
                    text += f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ({round(float(user['avg']), 1)})"
                c += 1
                top_text += f"{c}. {user['name_user']}(ID:{user['user_number']}): {text}\n\n"

        await bot.send_message(chat_id=call.from_user.id, text=f"–¢–æ–ø –ª—É—á—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö —É—Å–ª—É–≥–∞—Ö:\n\n"
                                                               f"{top_text}")
    else:
        await bot.send_message(chat_id=call.from_user.id, text=f"–í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª—Å—è —Ç–æ–ø –º–∞—Å—Ç–µ—Ä–æ–≤ –¥—Ä—É–≥–∏—Ö —É—Å–ª—É–≥")