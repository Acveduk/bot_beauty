from datetime import datetime

from aiogram import types

from data.prolong_sub import prolong_sub
from filters import CheckMaster
from keyboards.default.services import other_services_keyboard
from loader import dp, bot
from utils.db_api import postgres


@dp.message_handler(CheckMaster(), text='üßñ‚Äç‚ôÄÔ∏è–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏')
async def manicure_and_pedicure(message: types.Message):
    await prolong_sub(user_id=message.from_user.id)
    sub = await postgres.get_sub_master(user_id=message.from_user.id)
    if sub[0]['other_services'] == '–î–∞':
        check_date_subscription = await postgres.check_date_sub_other_services(user_id=message.from_user.id)
        for check_date in check_date_subscription:
            if datetime.now() <= check_date['date_end']:
                services_other_services = await postgres.check_other_services(user_id=message.from_user.id)
                await bot.send_message(chat_id=message.from_user.id,
                                       text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ',
                                       reply_markup=other_services_keyboard(
                                           services_other_services=services_other_services))

    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row('üíÖ –ú–∞–Ω–∏–∫—é—Ä/–ü–µ–¥–∏–∫—é—Ä', 'üíá‚Äç‚ôÄÔ∏è–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä')
        keyboard.row('üíã –í–∏–∑–∞–∂', 'üßñ‚Äç‚ôÄÔ∏è–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏')
        keyboard.row('‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        await bot.send_message(chat_id=message.from_user.id,
                               text='–û—Ñ–æ—Ä–º–∏—Ç–µ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–Ω–æ–≤—å –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ –∫–æ—à–µ–ª–µ–∫',
                               reply_markup=keyboard)


@dp.message_handler(CheckMaster(), text='üíÜ‚Äç‚ôÄÔ∏è–ú–∞—Å—Å–∞–∂ ‚ùå')
async def manicure_and_pedicure(message: types.Message):
    if await postgres.check_master_in_other_services(user_id=message.from_user.id):
        check_date_subscription = await postgres.check_date_sub_other_services(user_id=message.from_user.id)
        for check_date in check_date_subscription:
            if datetime.now() <= check_date['date_end']:
                await postgres.update_massage(user_id=message.from_user.id, massage='–î–∞')
                services_other_services = await postgres.check_other_services(user_id=message.from_user.id)
                await bot.send_message(chat_id=message.from_user.id,
                                       text='–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —É—Å–ª—É–≥—É –º–∞—Å—Å–∞–∂',
                                       reply_markup=other_services_keyboard(
                                           services_other_services=services_other_services))

    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row('üíÖ –ú–∞–Ω–∏–∫—é—Ä/–ü–µ–¥–∏–∫—é—Ä', 'üíá‚Äç‚ôÄÔ∏è–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä')
        keyboard.row('üíã –í–∏–∑–∞–∂', 'üßñ‚Äç‚ôÄÔ∏è–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏')
        keyboard.row('‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        await bot.send_message(chat_id=message.from_user.id,
                               text='–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ –∫–æ—à–µ–ª–µ–∫',
                               reply_markup=keyboard)


@dp.message_handler(CheckMaster(), text='üë©‚Äç‚öïÔ∏è–î–µ–ø–∏–ª—è—Ü–∏—è –≤–æ—Å–∫–æ–º ‚ùå')
async def manicure_and_pedicure(message: types.Message):
    if await postgres.check_master_in_other_services(user_id=message.from_user.id):
        check_date_subscription = await postgres.check_date_sub_other_services(user_id=message.from_user.id)
        for check_date in check_date_subscription:
            if datetime.now() <= check_date['date_end']:
                await postgres.update_depilation_with_wax(user_id=message.from_user.id, depilation_with_wax='–î–∞')
                services_other_services = await postgres.check_other_services(user_id=message.from_user.id)
                await bot.send_message(chat_id=message.from_user.id,
                                       text='–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —É—Å–ª—É–≥—É –¥–µ–ø–∏–ª—è—Ü–∏—è –≤–æ—Å–∫–æ–º',
                                       reply_markup=other_services_keyboard(
                                           services_other_services=services_other_services))

    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row('üíÖ –ú–∞–Ω–∏–∫—é—Ä/–ü–µ–¥–∏–∫—é—Ä', 'üíá‚Äç‚ôÄÔ∏è–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä')
        keyboard.row('üíã –í–∏–∑–∞–∂', 'üßñ‚Äç‚ôÄÔ∏è–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏')
        keyboard.row('‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        await bot.send_message(chat_id=message.from_user.id,
                               text='–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ –∫–æ—à–µ–ª–µ–∫',
                               reply_markup=keyboard)


@dp.message_handler(CheckMaster(), text='üßñ‚Äç‚ôÄÔ∏è–®—É–≥–∞—Ä–∏–Ω–≥ ‚ùå')
async def manicure_and_pedicure(message: types.Message):
    if await postgres.check_master_in_other_services(user_id=message.from_user.id):
        check_date_subscription = await postgres.check_date_sub_other_services(user_id=message.from_user.id)
        for check_date in check_date_subscription:
            if datetime.now() <= check_date['date_end']:
                await postgres.update_shugaring(user_id=message.from_user.id, shugaring='–î–∞')
                services_other_services = await postgres.check_other_services(user_id=message.from_user.id)
                await bot.send_message(chat_id=message.from_user.id,
                                       text='–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —É—Å–ª—É–≥—É —à—É–≥–∞—Ä–∏–Ω–≥',
                                       reply_markup=other_services_keyboard(
                                           services_other_services=services_other_services))

    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row('üíÖ –ú–∞–Ω–∏–∫—é—Ä/–ü–µ–¥–∏–∫—é—Ä', 'üíá‚Äç‚ôÄÔ∏è–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä')
        keyboard.row('üíã –í–∏–∑–∞–∂', 'üßñ‚Äç‚ôÄÔ∏è–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏')
        keyboard.row('‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        await bot.send_message(chat_id=message.from_user.id,
                               text='–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ –∫–æ—à–µ–ª–µ–∫',
                               reply_markup=keyboard)


@dp.message_handler(CheckMaster(), text='üß¥ –ó–∞–≥–∞—Ä –¥–æ–º–∞ ‚ùå')
async def manicure_and_pedicure(message: types.Message):
    if await postgres.check_master_in_other_services(user_id=message.from_user.id):
        check_date_subscription = await postgres.check_date_sub_other_services(user_id=message.from_user.id)
        for check_date in check_date_subscription:
            if datetime.now() <= check_date['date_end']:
                await postgres.update_tan_at_home(user_id=message.from_user.id, tan_at_home='–î–∞')
                services_other_services = await postgres.check_other_services(user_id=message.from_user.id)
                await bot.send_message(chat_id=message.from_user.id,
                                       text='–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —É—Å–ª—É–≥—É –∑–∞–≥–∞—Ä –¥–æ–º–∞',
                                       reply_markup=other_services_keyboard(
                                           services_other_services=services_other_services))

    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row('üíÖ –ú–∞–Ω–∏–∫—é—Ä/–ü–µ–¥–∏–∫—é—Ä', 'üíá‚Äç‚ôÄÔ∏è–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä')
        keyboard.row('üíã –í–∏–∑–∞–∂', 'üßñ‚Äç‚ôÄÔ∏è–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏')
        keyboard.row('‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        await bot.send_message(chat_id=message.from_user.id,
                               text='–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ –∫–æ—à–µ–ª–µ–∫',
                               reply_markup=keyboard)


@dp.message_handler(CheckMaster(), text='üíÜ‚Äç‚ôÄÔ∏è–ú–∞—Å—Å–∞–∂ ‚úÖ')
async def manicure_and_pedicure(message: types.Message):
    if await postgres.check_master_in_other_services(user_id=message.from_user.id):
        check_date_subscription = await postgres.check_date_sub_other_services(user_id=message.from_user.id)
        for check_date in check_date_subscription:
            if datetime.now() <= check_date['date_end']:
                await postgres.update_massage(user_id=message.from_user.id, massage='–ù–µ—Ç')
                services_other_services = await postgres.check_other_services(user_id=message.from_user.id)
                await bot.send_message(chat_id=message.from_user.id,
                                       text='–í—ã —É–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É –º–∞—Å—Å–∞–∂',
                                       reply_markup=other_services_keyboard(
                                           services_other_services=services_other_services))

    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row('üíÖ –ú–∞–Ω–∏–∫—é—Ä/–ü–µ–¥–∏–∫—é—Ä', 'üíá‚Äç‚ôÄÔ∏è–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä')
        keyboard.row('üíã –í–∏–∑–∞–∂', 'üßñ‚Äç‚ôÄÔ∏è–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏')
        keyboard.row('‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        await bot.send_message(chat_id=message.from_user.id,
                               text='–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ –∫–æ—à–µ–ª–µ–∫',
                               reply_markup=keyboard)


@dp.message_handler(CheckMaster(), text='üë©‚Äç‚öïÔ∏è–î–µ–ø–∏–ª—è—Ü–∏—è –≤–æ—Å–∫–æ–º ‚úÖ')
async def manicure_and_pedicure(message: types.Message):
    if await postgres.check_master_in_other_services(user_id=message.from_user.id):
        check_date_subscription = await postgres.check_date_sub_other_services(user_id=message.from_user.id)
        for check_date in check_date_subscription:
            if datetime.now() <= check_date['date_end']:
                await postgres.update_depilation_with_wax(user_id=message.from_user.id, depilation_with_wax='–ù–µ—Ç')
                services_other_services = await postgres.check_other_services(user_id=message.from_user.id)
                await bot.send_message(chat_id=message.from_user.id,
                                       text='–í—ã —É–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É –¥–µ–ø–∏–ª—è—Ü–∏—è –≤–æ—Å–∫–æ–º',
                                       reply_markup=other_services_keyboard(
                                           services_other_services=services_other_services))

    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row('üíÖ –ú–∞–Ω–∏–∫—é—Ä/–ü–µ–¥–∏–∫—é—Ä', 'üíá‚Äç‚ôÄÔ∏è–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä')
        keyboard.row('üíã –í–∏–∑–∞–∂', 'üßñ‚Äç‚ôÄÔ∏è–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏')
        keyboard.row('‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        await bot.send_message(chat_id=message.from_user.id,
                               text='–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ –∫–æ—à–µ–ª–µ–∫',
                               reply_markup=keyboard)


@dp.message_handler(CheckMaster(), text='üßñ‚Äç‚ôÄÔ∏è–®—É–≥–∞—Ä–∏–Ω–≥ ‚úÖ')
async def manicure_and_pedicure(message: types.Message):
    if await postgres.check_master_in_other_services(user_id=message.from_user.id):
        check_date_subscription = await postgres.check_date_sub_other_services(user_id=message.from_user.id)
        for check_date in check_date_subscription:
            if datetime.now() <= check_date['date_end']:
                await postgres.update_shugaring(user_id=message.from_user.id, shugaring='–ù–µ—Ç')
                services_other_services = await postgres.check_other_services(user_id=message.from_user.id)
                await bot.send_message(chat_id=message.from_user.id,
                                       text='–í—ã —É–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É —à—É–≥–∞—Ä–∏–Ω–≥',
                                       reply_markup=other_services_keyboard(
                                           services_other_services=services_other_services))

    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row('üíÖ –ú–∞–Ω–∏–∫—é—Ä/–ü–µ–¥–∏–∫—é—Ä', 'üíá‚Äç‚ôÄÔ∏è–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä')
        keyboard.row('üíã –í–∏–∑–∞–∂', 'üßñ‚Äç‚ôÄÔ∏è–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏')
        keyboard.row('‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        await bot.send_message(chat_id=message.from_user.id,
                               text='–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ –∫–æ—à–µ–ª–µ–∫',
                               reply_markup=keyboard)


@dp.message_handler(CheckMaster(), text='üß¥ –ó–∞–≥–∞—Ä –¥–æ–º–∞ ‚úÖ')
async def manicure_and_pedicure(message: types.Message):
    if await postgres.check_master_in_other_services(user_id=message.from_user.id):
        check_date_subscription = await postgres.check_date_sub_other_services(user_id=message.from_user.id)
        for check_date in check_date_subscription:
            if datetime.now() <= check_date['date_end']:
                await postgres.update_tan_at_home(user_id=message.from_user.id, tan_at_home='–ù–µ—Ç')
                services_other_services = await postgres.check_other_services(user_id=message.from_user.id)
                await bot.send_message(chat_id=message.from_user.id,
                                       text='–í—ã —É–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É –∑–∞–≥–∞—Ä –¥–æ–º–∞',
                                       reply_markup=other_services_keyboard(
                                           services_other_services=services_other_services))

    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row('üíÖ –ú–∞–Ω–∏–∫—é—Ä/–ü–µ–¥–∏–∫—é—Ä', 'üíá‚Äç‚ôÄÔ∏è–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä')
        keyboard.row('üíã –í–∏–∑–∞–∂', 'üßñ‚Äç‚ôÄÔ∏è–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏')
        keyboard.row('‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        await bot.send_message(chat_id=message.from_user.id,
                               text='–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ –∫–æ—à–µ–ª–µ–∫',
                               reply_markup=keyboard)
